package com.google.GCM;

import static com.google.GCM.CommonUtilities.SERVER_URL;
import static com.google.GCM.CommonUtilities.TAG;

import java.io.IOException;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Random;

import org.json.JSONObject;

import android.content.Context;
import android.os.AsyncTask;
import android.util.Log;

import com.example.appData.reminderData;
import com.example.http.RequestTask;
import com.google.android.gcm.GCMRegistrar;

public class ServerUtilities {
	private static final int MAX_ATTEMPTS = 5;
	private static final int BACKOFF_MILLI_SECONDS = 2000;
	private static final Random random = new Random();
	public static final String FIELD_RESULT = "result";
	public static String Err = "";
	public static boolean network_check;

	public static String login(String user, String pass, String regID) {

		Log.i(TAG, "login device " + regID);
		if (network_check) {
			String serverUrl = SERVER_URL;
			try {
				String url = serverUrl
						+ "?mod=login_reminder&device=android&username=" + user
						+ "&password=" + pass + "&token=" + regID;
				AsyncTask<String, String, String> jsonString = new RequestTask()
						.execute(url);
				Log.i(TAG, "Json: " + jsonString.get());
				Err = "";
				return jsonString.get();
			} catch (Exception ex) {
				Log.e(TAG, "không thể đăng nhập");
				Err = "Mất kết nối";
				return "";
			}
		} else {
			Log.e("network", "khong the ket noi internet");
			Err = "Mất kết nối";
			return "";
		}

	}

	public static boolean logOut(int user_id, String regID) {
		Err = "";
		if (network_check) {
			Log.i(TAG, "logOut device " + regID);
			String serverUrl = SERVER_URL;
			try {
				String url = serverUrl + "?mod=logout_reminder&user_id="
						+ user_id + "&token=" + regID;
				AsyncTask<String, String, String> jsonString = new RequestTask()
						.execute(url);
				Log.i(TAG, "Json: " + jsonString.get());
				JSONObject json = new JSONObject(jsonString.get());
				Log.i(TAG, jsonString.get());
				return json.getBoolean(FIELD_RESULT);
			} catch (Exception ex) {
				Log.e(TAG, "không thể logOut");
				Err = "Mất kết nối";
				return false;
			}
		} else {
			Err = "Mất kết nối";
			return false;
		}
	}

	public static String getRemindData(int user_id) {
		Err = "";
		if (network_check) {
			Log.i(TAG, "get Reminder");
			String serverUrl = SERVER_URL;
			try {
				String url = serverUrl + "?mod=get_reminder&user_id=" + user_id;
				AsyncTask<String, String, String> jsonString = new RequestTask()
						.execute(url);
				return jsonString.get();
			} catch (Exception e) {
				e.printStackTrace();
				Err = "Mất kết nối";
				return null;
			}
		} else {
			Err = "Mất kết nối";
			return null;
		}
	}

	public static boolean complete(reminderData remind, int user_id) {
		/*
		 * http://bms.altamedia.vn/api.php?mod=reminder_action
		 * 
		 * user_id id type : task/project (lấy từ get_reminder) action :
		 * complete
		 * 
		 * return { result : true/false msg : }
		 */
		if (network_check) {
			String serverUrl = SERVER_URL;
			try {
				String url = serverUrl
						+ "?mod=reminder_action&action=complete&user_id="
						+ user_id + "&id=" + remind.getID() + "&type="
						+ remind.getType();
				AsyncTask<String, String, String> jsonString = new RequestTask()
						.execute(url);
				Log.i(TAG, "Json: " + jsonString.get());
				JSONObject json = new JSONObject(jsonString.get());
				Log.i(TAG, jsonString.get());
				return json.getBoolean(FIELD_RESULT);
			} catch (Exception e) {
				e.printStackTrace();
				Err = "Mất kết nối";
				return false;
			}
		} else {
			Err = "Mất kết nối";
			return false;
		}
	}

	/**
	 * Register this account/device pair within the server.
	 * 
	 */

	public static void register(final Context context, String name,
			String email, final String regId) {
		Log.i(TAG, "registering device (regId = " + regId + ")");
		String serverUrl = SERVER_URL;
		Map<String, String> params = new HashMap<String, String>();
		params.put("regId", regId);
		params.put("name", name);
		params.put("email", email);
		Log.i(TAG, "registering device (email = " + email + ")");
		long backoff = BACKOFF_MILLI_SECONDS + random.nextInt(1000);
		// Once GCM returns a registration id, we need to register on our server
		// As the server might be down, we will retry it a couple
		// times.
		for (int i = 1; i <= MAX_ATTEMPTS; i++) {
			Log.d(TAG, "Attempt #" + i + " to register");
			try {
				Log.i(TAG, "Run register ");
				// displayMessage(context, context.getString(
				// R.string.server_registering, i, MAX_ATTEMPTS));
				post(serverUrl, params);
				GCMRegistrar.setRegisteredOnServer(context, true);
				// String message =
				// context.getString(R.string.server_registered);
				// CommonUtilities.displayMessage(context, message, "");
				return;
			} catch (IOException e) {
				// Here we are simplifying and retrying on any error; in a real
				// application, it should retry only on unrecoverable errors
				// (like HTTP error code 503).
				Log.e(TAG, "Failed to register on attempt " + i + ":" + e);
				if (i == MAX_ATTEMPTS) {
					break;
				}
				try {
					Log.d(TAG, "Sleeping for " + backoff + " ms before retry");
					Thread.sleep(backoff);
				} catch (InterruptedException e1) {
					// Activity finished before we complete - exit.
					Log.d(TAG, "Thread interrupted: abort remaining retries!");
					Thread.currentThread().interrupt();
					return;
				}
				// increase backoff exponentially
				backoff *= 2;
			}
		}
		// String message = context.getString(R.string.server_register_error,
		// MAX_ATTEMPTS);
		// CommonUtilities.displayMessage(context, message);
	}

	/**
	 * Unregister this account/device pair within the server.
	 */
	public static void unregister(final Context context, final String regId) {
		Log.i(TAG, "unregistering device (regId = " + regId + ")");
		String serverUrl = SERVER_URL + "/unregister";
		Map<String, String> params = new HashMap<String, String>();
		params.put("regId", regId);
		GCMRegistrar.setRegisteredOnServer(context, false);
	}

	/**
	 * Issue a POST request to the server.
	 * 
	 * @param endpoint
	 *            POST address.
	 * @param params
	 *            request parameters.
	 * 
	 * @throws IOException
	 *             propagated from POST.
	 */
	private static void post(String endpoint, Map<String, String> params)
			throws IOException {
		Log.i(TAG, "Run Post ");
		URL url;
		try {
			url = new URL(endpoint);
		} catch (MalformedURLException e) {
			throw new IllegalArgumentException("invalid url: " + endpoint);
		}
		StringBuilder bodyBuilder = new StringBuilder();
		Iterator<Entry<String, String>> iterator = params.entrySet().iterator();
		// constructs the POST body using the parameters
		while (iterator.hasNext()) {
			Entry<String, String> param = iterator.next();
			bodyBuilder.append(param.getKey()).append('=')
					.append(param.getValue());
			if (iterator.hasNext()) {
				bodyBuilder.append('&');
			}
		}
		String body = bodyBuilder.toString();
		Log.v(TAG, "Posting '" + body + "' to " + url);
		byte[] bytes = body.getBytes();
		HttpURLConnection conn = null;
		try {
			Log.e("URL", "> " + url);
			conn = (HttpURLConnection) url.openConnection();
			conn.setDoOutput(true);
			conn.setUseCaches(false);
			conn.setFixedLengthStreamingMode(bytes.length);
			conn.setRequestMethod("POST");
			conn.setRequestProperty("Content-Type",
					"application/x-www-form-urlencoded;charset=UTF-8");
			// post the request
			OutputStream out = conn.getOutputStream();
			out.write(bytes);
			out.close();
			// handle the response
			int status = conn.getResponseCode();
			Log.i(TAG, "Post : " + conn.getResponseMessage());
			if (status != 200) {
				throw new IOException("Post failed with error code " + status);
			} else {
				Log.i(TAG, "Post : " + conn.getResponseMessage());
			}
		} finally {
			if (conn != null) {
				conn.disconnect();
			}
		}
	}
}
