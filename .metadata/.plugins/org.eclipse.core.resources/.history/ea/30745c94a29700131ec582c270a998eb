package com.example.bmsaltamedia;

import static com.google.GCM.CommonUtilities.SENDER_ID;
import static com.google.GCM.CommonUtilities.displayMessage;

import java.util.Iterator;
import java.util.List;

import android.app.ActivityManager;
import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.ActivityManager.RunningAppProcessInfo;
import android.content.Context;
import android.content.Intent;
import android.util.Log;

import com.example.bmsaltamedia.MainActivity;
import com.example.bmsaltamedia.R;
import com.google.GCM.ServerUtilities;
import com.google.android.gcm.GCMBaseIntentService;

public class GCMIntentService extends GCMBaseIntentService {
	private static final String TAG = "GCMIntentService";

	public GCMIntentService() {
		super(SENDER_ID);
	}
	/**
	 * Method called on device registered
	 **/
	protected void onRegistered(Context context, String registrationId) {
		Log.i(TAG, "Device registered: regId = " + registrationId);
		//ServerUtilities.register(context, "demo", "demo", registrationId);
	}
	/**
	 * Method called on device un registred
	 * */
	protected void onUnregistered(Context context, String registrationId) {
		Log.i(TAG, "Device unregistered");
		// displayMessage(context,
		// context.getString(R.string.gcm_unregistered),"");
		ServerUtilities.unregister(context, registrationId);
	}
	/**
	 * Method called on Receiving a new message
	 * */
	protected void onMessage(Context context, Intent intent) {
		Log.i(TAG, "Received message");
		
		//Log.i(TAG, intent.getStringExtra("msg"));
		//displayMessage(context, message, action);	
		  String message = intent.getExtras().getString("message");
	      String action = intent.getExtras().getString("action");
	      
	      Log.i(TAG, message);
		// notifies user
		generateNotification(context, action , message);
	}

	/**
	 * Method called on receiving a deleted message
	 * */
	protected void onDeletedMessages(Context context, int total) {
		Log.i(TAG, "Received deleted messages notification");
	}

	/**
	 * Method called on Error
	 * */
	public void onError(Context context, String errorId) {
		Log.i(TAG, "Received error: " + errorId);
		// displayMessage(context, context.getString(R.string.gcm_error,
		// errorId),"");
	}

	protected boolean onRecoverableError(Context context, String errorId) {
		// log message
		Log.i(TAG, "Received recoverable error: " + errorId);
		return super.onRecoverableError(context, errorId);
	}

	/**
	 * Issues a notification to inform the user that server has sent a message.
	 */
	private void generateNotification(Context context, String action,
			String message) {
		int icon = R.drawable.ic_launcher;
		long when = System.currentTimeMillis();
		NotificationManager notificationManager = (NotificationManager) context
				.getSystemService(Context.NOTIFICATION_SERVICE);
		Notification notification = new Notification(icon, message, when);
		//
		String title = context.getString(R.string.app_name);
		Intent intent = null;
		if (action.equals("1")) {
			intent = new Intent(context, MainActivity.class);
			intent.putExtra("message", message);
		} else if (action.equals("2")) {
		} else if (action.equals("3")) {
		} else if (action.equals("4")) {
		} else if (action.equals("5")) {
		} else if (action.equals("6")) {
		}
		// set intent so it does not start a new activity
		intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP
				| Intent.FLAG_ACTIVITY_SINGLE_TOP);

		PendingIntent pendingIntent = PendingIntent.getActivity(context, 2,
				intent, PendingIntent.FLAG_UPDATE_CURRENT);
		notification.setLatestEventInfo(context, title, message, pendingIntent);
		notification.flags |= Notification.FLAG_AUTO_CANCEL;

		// Play default notification sound
		notification.defaults |= Notification.DEFAULT_SOUND;

		// Vibrate if vibrate is enabled
		notification.defaults |= Notification.DEFAULT_VIBRATE;
		if (!context.getPackageName()
				.equalsIgnoreCase(
						((ActivityManager) context
								.getSystemService(Context.ACTIVITY_SERVICE))
								.getRunningTasks(1).get(0).topActivity
								.getPackageName())) {
			// App is not in the foreground
			notificationManager.notify(0, notification);
		}

	}

	private boolean isAppForground() {
		ActivityManager mActivityManager = (ActivityManager) getSystemService(Context.ACTIVITY_SERVICE);
		List<RunningAppProcessInfo> l = mActivityManager
				.getRunningAppProcesses();
		Iterator<RunningAppProcessInfo> i = l.iterator();
		while (i.hasNext()) {
			RunningAppProcessInfo info = i.next();

			if (info.uid == getApplicationInfo().uid
					&& info.importance == RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {
				return true;
			}
		}
		return false;
	}
}
