package com.altamedia.androidgcm;

import static com.google.GCM.CommonUtilities.DISPLAY_MESSAGE_ACTION;
import static com.google.GCM.CommonUtilities.EXTRA_ACTION;
import static com.google.GCM.CommonUtilities.EXTRA_MESSAGE;
import static com.google.GCM.CommonUtilities.SENDER_ID;
import android.app.Activity;
import android.app.ActivityManager;
import android.content.BroadcastReceiver;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v4.content.WakefulBroadcastReceiver;
import android.util.Log;
import android.widget.TextView;
import android.widget.Toast;

import com.google.GCM.ServerUtilities;
import com.google.GCM.WakeLocker;
import com.google.android.gcm.GCMRegistrar;

public class MainActivity extends Activity {

	public static String name;
	public static String email;

	public TextView txt_msg;
	// Asyntask
	AsyncTask<Void, Void, Void> mRegisterTask;

	public static String newAction = "";

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		String str = android.os.Build.PRODUCT + android.os.Build.USER
				+ android.os.Build.SERIAL;
		name = str;
		email = "thanh.le@alta.com.vn";

		txt_msg = (TextView) findViewById(R.id.txt_msg);

		// Get Data From Notification
		Bundle extras = getIntent().getExtras();
		if (extras != null) {
			String message = extras.getString("message", "");
			if (!message.equals("")) {
				txt_msg.setText(message);
			}
		}

		// Make sure the device has the proper dependencies.
		GCMRegistrar.checkDevice(this);

		// Make sure the manifest was properly set - comment out this line
		// while developing the app, then uncomment it when it's ready.
		GCMRegistrar.checkManifest(this);

		// lblMessage = (TextView) findViewById(R.id.lblMessage);

		registerReceiver(mHandleMessageReceiver, new IntentFilter(
				DISPLAY_MESSAGE_ACTION));

		// Get GCM registration id
		final String regId = GCMRegistrar.getRegistrationId(this);
		Log.i("regID", regId+"|alo");
		// Check if regid already presents
		if (regId.equals("")) {
			// Registration is not present, register now with GCM
			GCMRegistrar.register(this, SENDER_ID);
		} else {
			// Device is already registered on GCM
			if (GCMRegistrar.isRegisteredOnServer(this)) {
				// Skips registration.
				Toast.makeText(getApplicationContext(),
						"Already registered with GCM", Toast.LENGTH_LONG)
						.show();
				Log.i("Main", "Already registered with GCM");
			} else {
				// Try to register again, but not in the UI thread.
				// It's also necessary to cancel the thread onDestroy(),
				// hence the use of AsyncTask instead of a raw thread.
				final Context context = this;
				mRegisterTask = new AsyncTask<Void, Void, Void>() {
					@Override
					protected Void doInBackground(Void... params) {
						// Register on our server
						// On server creates a new user
						ServerUtilities.register(context, name, email, regId);
						return null;
					}

					@Override
					protected void onPostExecute(Void result) {
						mRegisterTask = null;
					}

				};
				mRegisterTask.execute(null, null, null);
			}
		}

	}

	/**
	 * Receiving push messages
	 * */

	public class GcmBroadcastReceiver extends WakefulBroadcastReceiver {

		@Override
		public void onReceive(Context context, Intent intent) {

			// Explicitly specify that GcmIntentService will handle the intent.
			ComponentName comp = new ComponentName(context.getPackageName(),
					GCMIntentService.class.getName());
			// Start the service, keeping the device awake while it is
			// launching.
			startWakefulService(context, (intent.setComponent(comp)));
			setResultCode(Activity.RESULT_OK);
		}
	}

	private final BroadcastReceiver mHandleMessageReceiver = new GcmBroadcastReceiver() {
		@Override
		public void onReceive(Context context, Intent intent) {

			String newMessage = intent.getExtras().getString(EXTRA_MESSAGE);
			newAction = intent.getExtras().getString(EXTRA_ACTION);

			// Waking up mobile if it is sleeping
			WakeLocker.acquire(getApplicationContext());

			/**
			 * Take appropriate action on this message depending upon your app
			 * requirement For now i am just displaying it on the screen
			 * */

			if (MainActivity.this != null && txt_msg != null) {
				txt_msg.setText(newMessage);
			}

			// Showing received message
			// lblMessage.append(newMessage + "\n");
			if (!context.getPackageName().equalsIgnoreCase(
					((ActivityManager) context
							.getSystemService(Context.ACTIVITY_SERVICE))
							.getRunningTasks(1).get(0).topActivity
							.getPackageName())) {
				// App is not in the foreground
				Toast.makeText(getApplicationContext(),
						"New Message: " + newMessage, Toast.LENGTH_LONG).show();
			}

			// Releasing wake lock
			WakeLocker.release();
		}
	};

	@Override
	protected void onDestroy() {
		if (mRegisterTask != null) {
			mRegisterTask.cancel(true);
		}
		try {
			unregisterReceiver(mHandleMessageReceiver);
			GCMRegistrar.onDestroy(this);
		} catch (Exception e) {
			Log.e("UnRegister Receiver Error", "> " + e.getMessage());
		}
		super.onDestroy();
	}
}
