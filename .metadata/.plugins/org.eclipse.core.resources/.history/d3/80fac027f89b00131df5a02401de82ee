package com.altamedia.bmsaltamedia;

import static com.altamedia.GCM.CommonUtilities.SENDER_ID;
import static com.altamedia.GCM.CommonUtilities.displayMessage;

import java.util.Iterator;
import java.util.List;

import org.json.JSONArray;
import org.json.JSONObject;

import android.app.ActivityManager;
import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.ActivityManager.RunningAppProcessInfo;
import android.content.Context;
import android.content.Intent;
import android.util.Log;

import com.altamedia.GCM.ServerUtilities;
import com.altamedia.GCM.dataAppSave;
import com.altamedia.Json.reminderDataJson;
import com.altamedia.appData.reminderData;
import com.altamedia.sqllite.MySQLiteHelper;

import com.example.bmsaltamedia.R;

import com.google.android.gcm.GCMBaseIntentService;

public class GCMIntentService extends GCMBaseIntentService {
	private static final String TAG = "GCMIntentService";
	public static boolean flag;
	public static final String DISPLAY_MESSAGE_ACTION = "com.altamedia.androidgcm.DISPLAY_MESSAGE";

	public GCMIntentService() {
		super(SENDER_ID);
	}

	/**
	 * Method called on device registered
	 **/
	protected void onRegistered(Context context, String registrationId) {
		Log.i(TAG, "Device registered: regId = " + registrationId);
		// ServerUtilities.register(context, "demo", "demo", registrationId);
	}

	/**
	 * Method called on device un registred
	 * */
	protected void onUnregistered(Context context, String registrationId) {
		Log.i(TAG, "Device unregistered");
		// displayMessage(context,
		// context.getString(R.string.gcm_unregistered),"");
		ServerUtilities.unregister(context, registrationId);
	}

	/**
	 * Method called on Receiving a new message
	 * */
	protected void onMessage(Context context, Intent intent) {
		String message = intent.getExtras().getString("message");
		String action = intent.getExtras().getString("action");
		flag = (Integer.parseInt(dataAppSave.loadSavedPreferences(context,
				"login")) == 1);
		Log.d("apdata", dataAppSave.loadSavedPreferences(context, "login"));
		if (flag) {
			Log.i(TAG, "Received message[" + message + "]");
			reLoadLayout(context);
			generateNotification(context, action, message);

		} else {
			Log.e(TAG, "Received message cancel msg[" + message + "]");
			
		}
	}

	/**
	 * Method called on receiving a deleted message
	 * */
	protected void onDeletedMessages(Context context, int total) {
		Log.i(TAG, "Received deleted messages notification");
	}

	/**
	 * Method called on Error
	 * */
	public void onError(Context context, String errorId) {
		Log.i(TAG, "Received error: " + errorId);

	}

	protected boolean onRecoverableError(Context context, String errorId) {
		// log message
		Log.i(TAG, "Received recoverable error: " + errorId);
		return super.onRecoverableError(context, errorId);
	}

	/**
	 * Issues a notification to inform the user that server has sent a message.
	 */

	private void generateNotification(Context context, String action,
			String message) {

		int icon = R.drawable.ic_launcher;
		long when = System.currentTimeMillis();
		NotificationManager notificationManager = (NotificationManager) context
				.getSystemService(Context.NOTIFICATION_SERVICE);
		Notification notification = new Notification(icon, message, when);
		//
		String title = context.getString(R.string.app_name);
		Intent intent = null;

		intent = new Intent(context, SplashScreen.class);
		intent.putExtra("message", message);

		// set intent so it does not start a new activity
		intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP
				| Intent.FLAG_ACTIVITY_SINGLE_TOP);

		PendingIntent pendingIntent = PendingIntent.getActivity(context, 2,
				intent, PendingIntent.FLAG_UPDATE_CURRENT);
		notification.setLatestEventInfo(context, title, message, pendingIntent);
		notification.flags |= Notification.FLAG_AUTO_CANCEL;

		// Play default notification sound
		notification.defaults |= Notification.DEFAULT_SOUND;

		// Vibrate if vibrate is enabled
		notification.defaults |= Notification.DEFAULT_VIBRATE;
		if (!context.getPackageName()
				.equalsIgnoreCase(
						((ActivityManager) context
								.getSystemService(Context.ACTIVITY_SERVICE))
								.getRunningTasks(1).get(0).topActivity
								.getPackageName())) {
			// App is not in the foreground				
			httpGetData(context);
		}
		notificationManager.notify(0, notification);
		
	}

	public static void reLoadLayout(Context context) {
		Intent intent = new Intent(DISPLAY_MESSAGE_ACTION);
		Log.i(TAG, "reload data");
		context.sendBroadcast(intent);
	}

	public void httpGetData(Context context) {
		// Log.e("static","save data base");
		int userid = Integer.parseInt(dataAppSave.loadSavedPreferences(context,
				"user_id"));
		String acess=dataAppSave.loadSavedPreferences(context, "access_token");
		String jsonStr = ServerUtilities.getRemindData(userid,acess);
		Log.e("Json", " "+jsonStr);
		MySQLiteHelper db = new MySQLiteHelper(context);
		
		if (jsonStr != null) {
			try {
				db.emptyReminder();
				JSONObject jsonObj = new JSONObject(jsonStr);
				JSONArray reminders = jsonObj.getJSONArray("reminders");
				int length = reminders.length();
				if (length > 0) {
					for (int i = 0; i < length; i++) {
						try {
							JSONObject item = reminders.getJSONObject(i);
							reminderData tmpReminder = new reminderData(
									new reminderDataJson(item));
							db.addReminder(tmpReminder);
							// Log.i("Reminder", tmpReminder.toString());

						} catch (Exception e) {
							e.printStackTrace();
						}
					}
				} else {

				}
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
	}

	private boolean isAppForground() {
		ActivityManager mActivityManager = (ActivityManager) getSystemService(Context.ACTIVITY_SERVICE);
		List<RunningAppProcessInfo> l = mActivityManager
				.getRunningAppProcesses();
		Iterator<RunningAppProcessInfo> i = l.iterator();
		while (i.hasNext()) {
			RunningAppProcessInfo info = i.next();

			if (info.uid == getApplicationInfo().uid
					&& info.importance == RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {
				return true;
			}
		}
		return false;
	}
}
